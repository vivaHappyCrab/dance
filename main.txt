package dance.dance;

import android.graphics.Color;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.view.Window;
import android.view.WindowManager;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import org.apache.commons.net.ftp.*;
import java.net.*;

import static java.net.InetAddress.*;

//import static com.test.appl.R.id.a2_back;


public class MainActivity extends AppCompatActivity {
    ListView nominationList;
    String[] strs = new String[20];
    String[] judges = new String[21];
    String[] gruppa;
    String t_nomination, t_judge;
    Integer nomination_num, danceCount, yMarks,yMarksDone, round,pairs, danceNumber,turnCount,turnNumber,place,judge_num;
    int state = 0,size,startButton,finAmount;
    MainActivity self = this;
    boolean paroled = false;
    boolean error=false;
    ArrayList<String[]> pairsNum=new ArrayList<>();
    ArrayList<Integer[]> pairsState=new ArrayList<>();
    int[] marksDone=new int[6];
    int[] fbutton={R.id.button3,R.id.button13,R.id.button23,R.id.button31,R.id.button43,R.id.button83};;
    String path = android.os.Environment.getExternalStorageDirectory().getAbsolutePath();
    Thread ftp;
    File sdPath;
    File backup;
    ArrayList<File> sender=new ArrayList<>();
    BufferedWriter bWriter;
    Connecter c;
    boolean restore;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // requestWindowFeature(Window.FEATURE_NO_TITLE);
        //getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
        //        WindowManager.LayoutParams.FLAG_FULLSCREEN);
        Init();
        setContentView(R.layout.activity_main);
        CreteMainListeners();
    }

    private void recurseMain(){CreteMainListeners();}

    private void Init() {
        for (int i = 0; i < 20; ++i) strs[i] = "";
        sdPath = new File(path);
        sdPath.mkdirs();
        backup =new File(path,"backup.log");
        logger= new File(path,"log.txt");
        try {
            logWriter = new BufferedWriter(new FileWriter(logger));
        }catch(Exception e){}
        for(int i=0;i<6;++i)marksDone[i]=0;
        c=new Connecter();
        (ftp=new Thread(c)).start();
        c.setState(1);
        try {
            int countdown=100;
            while((c.getState()!=0)&&(countdown!=0)) {
                Thread.sleep(100);
                countdown--;
                //c.setState(1);
            }
            if(countdown==0)
                error=true;
        } catch (InterruptedException e) {}
    }

    private void CreteMainListeners(){
        nomination_num=-1;
        nominationList = (ListView) findViewById(R.id.nominationList);
        nominationList.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
        if(!error) {
            try {
                File sdFile = new File(sdPath, "tnominations.txt");
                c.setDFile("nominations.txt");
                c.setDPath("/airdance");
                c.setFile(sdFile);
                c.setState(2);
                while (c.getState() != 0) try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                String tmp;
                int i = 0;
                BufferedReader br = new BufferedReader(new FileReader(sdFile));
                while ((tmp = br.readLine()) != null) {
                    strs[i] = tmp;
                    i++;
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        else {
            ((Button) findViewById(R.id.next)).setEnabled(false);
            for (int i = 0; i < 20; ++i) strs[i] = "";
            strs[0] = "Ошибка подключения";
            strs[1] ="Проверьте наличие сети и доступность хранилища";
        }
        ArrayAdapter<String> nominationCount = new ArrayAdapter<String>(this,android.R.layout.simple_list_item_single_choice, strs);
        nominationList.setAdapter(nominationCount);
        if(!error) {
            nominationList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                @Override
                public void onItemClick(AdapterView<?> parent, View itemClicked, int position, long id) {
                    if (strs[position].length() > 2) {
                        int s = (strs[position].charAt(0) == '\uFEFF') ? 1 : 0;
                        int t = strs[position].indexOf(":");
                        String val = strs[position].substring(s, t);
                        nomination_num = Integer.valueOf(val);
                        t_nomination = strs[position].substring(t + 1);
                    }
                }
            });
        }
        Button bck = (Button) findViewById(R.id.exit);
        bck.setOnClickListener(new View.OnClickListener() {
            @Override

            public void onClick(View v) {
                try {
                    c.setState(4);
                    Thread.sleep(100);
                    c.setState(-1);
                    Thread.sleep(100);
                }catch(Exception e){}
                self.finish();
            }
        });
        bck = (Button) findViewById(R.id.next);
        bck.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if ((nomination_num > 0) && (t_nomination.length() > 2)) {
                    setContentView(R.layout.second_activ);
                    state = 1;
                    ReadJudges();
                    ArrayAdapter<String> judgeList = new ArrayAdapter<String>(self, android.R.layout.simple_list_item_single_choice, judges);
                    ((ListView) findViewById(R.id.judges)).setAdapter(judgeList);
                    ((ListView) findViewById(R.id.judges)).setOnItemClickListener(new AdapterView.OnItemClickListener() {
                        @Override
                        public void onItemClick(AdapterView<?> parent, View itemClicked, int position, long id) {
                            judge_num = position + 1;
                            t_judge = judges[position].substring(4);
                        }
                    });
                    CreateJudgeListneres();
                    Button bck = (Button) findViewById(R.id.back);
                    bck.setOnClickListener(new View.OnClickListener() {
                        @Override

                        public void onClick(View v) {
                            state = 0;
                            setContentView(R.layout.activity_main);
                            recurseMain();
                        }
                    });
                }
            }
        });
    }

    private void ReadJudges() {
        try {
            File sdFile = new File(sdPath, "tjudges.txt");
            c.setDFile("judge.txt");
            c.setDPath("/airdance/"+String.valueOf(nomination_num));
            c.setFile(sdFile);
            c.setState(2);
            while(c.getState()!=0) try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            BufferedReader br =new BufferedReader(new FileReader(sdFile));
            Integer i = 0;
            String str = "";
            while ((str = br.readLine()) != null) {
                str=str.substring(str.charAt(0)=='\uFEFF'?2:1,str.length()-1);
                if(!str.equals(""))judges[i] = Integer.toString(i+1)+".  "+str;
                else judges[i]="";
                i++;
            }
            paroled = judges[0].contains(",");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void CreateJudgeListneres() {
        Button judgeOk = (Button) findViewById(R.id.next);
        judgeOk.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!paroled) {
                    restore=CheckJudge();
                    ReadNomination();
                    if (round != 1) {
                        int totalCount=ReadDance();
                        if(pairs/turnCount>19) {
                            setContentView(R.layout.prom);
                            size = 25;
                            startButton=R.id.button;
                        }
                        else {
                            setContentView(R.layout.prom16);
                            size=20;
                            startButton=R.id.button61;
                        }
                        state = 3;
                        FillTitles(totalCount);
                        FillPairs();
                        CreateEventsNF();
                    } else {
                        setContentView(R.layout.fin);
                        state = 4;
                        ReadDanceF();
                        CreateEventsF();
                    }
                } else {
                    //TODO
                }
            }
        });
    }

    private boolean CheckJudge(){
        boolean q=false;
        try{
            BufferedReader br = new BufferedReader(new FileReader(backup));
            String nom=br.readLine();
            String ju=br.readLine();
            if (nom.equals(t_nomination)&&ju.equals(t_judge))
                q=true;
            br.close();
        }catch(Exception e){q=false;}
        return q;
    }

    private void ReadNomination() {
        try {
            File sdFile = new File(sdPath, "tgroup.txt");
            c.setDFile("gruppa.txt");
            c.setDPath("/airdance/"+String.valueOf(nomination_num));
            c.setFile(sdFile);
            c.setState(2);
            while(c.getState()!=0) try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int i=0;
            BufferedReader br =new BufferedReader(new FileReader(sdFile));
            String str = br.readLine().substring(1);
            gruppa = str.split(";");
            pairs=Integer.valueOf(gruppa[1]);
            yMarks=Integer.valueOf(gruppa[2]);
            round=Integer.valueOf(gruppa[3]);
            danceCount=Integer.valueOf(gruppa[4]);
            if(restore){
                try{
                    BufferedReader rs = new BufferedReader(new FileReader(backup));
                    rs.readLine();rs.readLine();
                    danceNumber=Integer.valueOf(rs.readLine());
                    br.close();
                }catch(Exception e){e.printStackTrace();}
            }
            else
                danceNumber=1;
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private int ReadDance() {
        int totalCount=0;
        try {
            turnCount=0;
            yMarksDone=0;
            pairsNum.clear();
            pairsState.clear();
            File sdFile = new File(sdPath, "tdance.txt");
            if(danceNumber<10)
                c.setDFile("dance0" + Integer.toString(danceNumber) + ".txt");
            else
                c.setDFile("dance" + Integer.toString(danceNumber) + ".txt");
            c.setDPath("/airdance/"+String.valueOf(nomination_num));
            c.setFile(sdFile);
            c.setState(2);
            while(c.getState()!=0) try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            BufferedReader br =new BufferedReader(new FileReader(sdFile));
            String str = "";
            while ((str = br.readLine()) != null) {
                String[] tmp = str.split(";");
                int j=0;
                while(!tmp[j].equals("0"))j++;
                totalCount+=j-1;
                pairsNum.add(tmp);
                Integer[] x=new Integer[25];
                for(int i=0;i<25;++i)x[i]=0;
                pairsState.add(x);
                turnCount++;
            }
            if(restore){
                try{
                    restore=false;
                    BufferedReader rs = new BufferedReader(new FileReader(backup));
                    rs.readLine();rs.readLine();rs.readLine();
                    turnNumber=Integer.valueOf(rs.readLine());
                    for(int i=0;i<pairsState.size();++i)
                        for(int j=0;j<25;++j) {
                            int x = Integer.valueOf(rs.readLine());
                            if(x==1)yMarksDone++;
                            pairsState.get(i)[j] = x;
                        }
                    br.close();
                }catch(Exception e){
                    e.printStackTrace();
                }
            }
            else
                turnNumber=0;
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return totalCount;
    }

    private void FillTitles(int totalCount){
        ((TextView)findViewById(R.id.desc)).setText(t_nomination+'\n'
                +t_judge+'\n'
                //+pairsNum.get(turnNumber)[0]+'\n'
                +"Кол-во заходов: "+Integer.toString(turnCount)+'\n'
                +Integer.toString(totalCount)+"->"+Integer.toString(yMarks));
        ((TextView)findViewById(R.id.counter)).setText(Integer.toString(yMarksDone));
        ((TextView)findViewById(R.id.dance)).setText("                  "+'\n'+(pairsNum.get(turnNumber)[0]).subSequence(1,pairsNum.get(turnNumber)[0].length()-1)+'\n'+"                  ");
        for(int i=0;i<5;++i){
            ((Button)findViewById(R.id.button55+i)).setVisibility(i < pairsNum.size() ? View.VISIBLE : View.INVISIBLE);
        }
        ((Button)findViewById(R.id.button54)).setEnabled(false);
        ((Button)findViewById(R.id.button60)).setEnabled(turnNumber>5);
    }

    private boolean Questioned(int turn){
        turn--;
        boolean f=false;
        if(turn>=turnCount)return false;
        for(int i=0;i<pairsState.get(turn).length;++i)
            if(pairsState.get(turn)[i]==2)
                f=true;
        return f;
    }

    private void FillPairs(){
        for(int i=0;i<size;++i) {
            String s=pairsNum.get(turnNumber)[i + 1];
            if(s.equals("0")) {
                ((Button) findViewById(startButton+i)).setText("");
                ((Button) findViewById(startButton+i)).setVisibility(View.INVISIBLE);
            }
            else
                ((Button) findViewById(startButton + i)).setText(pairsNum.get(turnNumber)[i + 1]);
            if(pairsState.get(turnNumber)[i]==1)((Button) findViewById(startButton + i)).setBackgroundResource(R.color.tvYes);
            if(pairsState.get(turnNumber)[i]==2)((Button) findViewById(startButton + i)).setBackgroundResource(R.color.tvMb);
            if(pairsState.get(turnNumber)[i]==0)((Button) findViewById(startButton + i)).setBackgroundResource(android.R.color.background_light);
        }
        ((TextView)findViewById(R.id.counter)).setText('\n'+Integer.toString(yMarksDone)+'\n');
        ((TextView)findViewById(R.id.counter)).setTextColor(yMarksDone == yMarks ? Color.argb(255, 20, 190, 20) : Color.argb(255, 0,0,0));
        findViewById(R.id.nf_send).setEnabled(yMarksDone == yMarks);
        for(int i=0;i<5;++i){
            if(Integer.valueOf((String)((Button) findViewById(R.id.button55 + i)).getText())==turnNumber+1)
                ((Button) findViewById(R.id.button55 + i)).setBackgroundResource(android.R.color.darker_gray);
            else
            if(Questioned(Integer.valueOf((String)((Button) findViewById(R.id.button55 + i)).getText())))
                ((Button) findViewById(R.id.button55 + i)).setBackgroundResource(R.color.tvMb);
            else
                ((Button) findViewById(R.id.button55 + i)).setBackgroundResource(android.R.color.background_light);
        }
    }

    private void CreateEventsNF(){
        for(int i=0;i<5;++i) {
            Button bck = (Button) findViewById(R.id.button55+i);
            bck.setOnClickListener(new View.OnClickListener() {
                public void onClick(View v) {
                    turnNumber = Integer.valueOf((String)(((Button)v).getText()))-1;
                    FillPairs();
                    WriteBackup();
                }
            });
        }
        Button bck = (Button) findViewById(R.id.nf_exit);
        bck.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                state = 0;
                setContentView(R.layout.activity_main);
                WriteBackup();
                recurseMain();
            }
        });
        for(int i=0;i<size;++i){
            ((Button)findViewById(startButton+i)).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    int n=v.getId()-startButton;
                    pairsState.get(turnNumber)[n]=(pairsState.get(turnNumber)[n]+1)%3;
                    if(pairsState.get(turnNumber)[n]==1)yMarksDone++;
                    if(pairsState.get(turnNumber)[n]==2)yMarksDone--;
                    FillPairs();
                    WriteBackup();
                }
            });
        }
        bck = (Button) findViewById(R.id.nf_send);
        bck.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                Send();
                if (danceNumber != danceCount) {
                    danceNumber++;
                    int n = ReadDance();
                    FillTitles(n);
                    FillPairs();
                    WriteBackup();
                } else {
                    state = 0;
                    setContentView(R.layout.activity_main);
                    recurseMain();
                }
            }
        });
    }

    private void WriteBackup(){
        try {
            bWriter=new BufferedWriter(new FileWriter(backup));
            bWriter.write(t_nomination + '\n');
            bWriter.append(t_judge + '\n');
            bWriter.append(Integer.toString(danceNumber) + '\n');
            bWriter.append(Integer.toString(turnNumber) + '\n');
            for(int i=0;i<pairsState.size();++i)
                for(int j=0;j<25;++j)
                    bWriter.append(Integer.toString(pairsState.get(i)[j])+'\n');
            bWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void Send(){
        try{
            String name="t"+((turnNumber<9)?"0":"")+Integer.toString(turnNumber+1)+"j"+((judge_num<9)?"0":"")+Integer.toString(judge_num)+"_"+pairsNum.get(0)[0].substring(1,pairsNum.get(0)[0].length()-1)+".txt";
            File f=new File(sdPath,name);
            BufferedWriter bw=new BufferedWriter(new FileWriter(f));
            for(int i=0;i<pairsState.size();++i)
                for(int j=0;j<25;++j)
                    if(pairsState.get(i)[j]==1)
                        bw.write(pairsNum.get(i)[j+1]+'\n');
            bw.close();
            c.setFile(f);
            c.setUFile(name);
            c.setUPath("/airdance/" + String.valueOf(nomination_num) + "/results");
            c.setState(3);
            while(c.getState()!=0)
                Thread.sleep(100);
        }catch (Exception e){
            e.printStackTrace();}
    }

    private void SendF(){
        try{
            String name="t01j"+((judge_num<9)?"0":"")+Integer.toString(judge_num)+"_"+pairsNum.get(0)[0].substring(1,pairsNum.get(0)[0].length()-1)+".txt";
            File f=new File(sdPath,name);
            BufferedWriter bw=new BufferedWriter(new FileWriter(f));
            for(int i=0;i<finAmount;++i)
                bw.write(pairsNum.get(0)[marksDone[i]]);
            bw.close();
            c.setFile(f);
            c.setUFile(name);
            c.setUPath("/airdance/" + String.valueOf(nomination_num) + "/results");
            c.setState(3);
            while(c.getState()!=0)
            Thread.sleep(100);
        }catch (Exception e){
            e.printStackTrace();}
    }

    private void WriteBackupF(){
        try {
            bWriter=new BufferedWriter(new FileWriter(backup));
            bWriter.write(t_nomination+'\n');
            bWriter.append(t_judge + '\n');
            bWriter.append(Integer.toString(danceNumber) + '\n');
            bWriter.append(Integer.toString(turnNumber)+'\n');
            for(int i=0;i<pairsState.size();++i)
                for(int j=0;j<6;++j)
                    bWriter.append(Integer.toString(pairsState.get(i)[j])+'\n');
            bWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void ReadDanceF() {
        Integer[] x=new Integer[6];
        for(int i=0;i< 6;++i) {
            x[i] = 0;
            marksDone[i]=0;
        }
        pairsState.clear();
        pairsState.add(x);
        pairsNum.clear();
        yMarksDone=0;
        File sdFile = new File(sdPath, "tdance.txt");
        if(danceNumber<10)
            c.setDFile("dance0" + Integer.toString(danceNumber) + ".txt");
        else
            c.setDFile("dance" + Integer.toString(danceNumber) + ".txt");
        c.setDPath("/airdance/" + String.valueOf(nomination_num));
        c.setFile(sdFile);
        c.setState(2);
        while(c.getState()!=0) try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        try{
            BufferedReader br =new BufferedReader(new FileReader(sdFile));
            String str = "";
            str=br.readLine();
            String[] tmp = str.split(";");
            finAmount=-1;
            while(!tmp[finAmount+1].equals("0"))finAmount++;
            pairsNum.add(tmp);
            if(restore){
            try{
                restore=false;
                BufferedReader rs = new BufferedReader(new FileReader(backup));
                rs.readLine();rs.readLine();rs.readLine();
                turnNumber=Integer.valueOf(rs.readLine());
                for(int j=0;j<6;++j) {
                    int t = Integer.valueOf(rs.readLine());
                    if(t!=0)yMarksDone++;
                    pairsState.get(0)[j] = t;
                    marksDone[t-1]=j+1;
                    }
                br.close();
            }catch(Exception e){
                e.printStackTrace();
            }
        }
        else
            turnNumber=0;
            FillFinal();
            ((TextView)findViewById(R.id.finfo)).setText(t_nomination + '\n'
                    + t_judge + '\n');
                    //+pairsNum.get(turnNumber)[0]+'\n'
                    //+"Кол-во заходов: "+Integer.toString(turnCount)+'\n');
            ((TextView)findViewById(R.id.fdance)).setText("                  " + '\n' + (pairsNum.get(turnNumber)[0]).subSequence(1, pairsNum.get(turnNumber)[0].length() - 1) + '\n' + "                  ");
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
    }

    private void CreateEventsF(){
        Button[][] mrks=new Button[6][6];
        for(int i=0;i<6;++i)
            for(int j=0;j<6;++j) {
                mrks[i][j] = (Button) findViewById(fbutton[i] + j);
                ((Button) findViewById(fbutton[i] + j)).setOnClickListener(new View.OnClickListener() {
                    public void onClick(View v) {
                        boolean q=true;
                        for (int i = 0; (i < 6)&&q; ++i)
                            for (int j = 0; (j < 6)&&q; ++j)
                                if (v == findViewById(fbutton[i] + j)) {
                                    q=false;
                                    if (pairsState.get(0)[i] == 0) {
                                        pairsState.get(0)[i] = j + 1;
                                        marksDone[j] = i+1;
                                        yMarksDone++;
                                    } else {
                                        pairsState.get(0)[i] = 0;
                                        marksDone[j] = 0;
                                        yMarksDone--;
                                    }
                                }
                        FillFinal();
                        WriteBackupF();
                    }
                });
            }
        ((TextView)findViewById(R.id.textView29)).setText(pairsNum.get(0)[1]);
        ((TextView)findViewById(R.id.textView28)).setText(pairsNum.get(0)[2]);
        ((TextView)findViewById(R.id.textView26)).setText(pairsNum.get(0)[3]);
        ((TextView)findViewById(R.id.textView27)).setText(pairsNum.get(0)[4]);
        ((TextView)findViewById(R.id.textView31)).setText(pairsNum.get(0)[5]);
        ((TextView)findViewById(R.id.textView32)).setText(pairsNum.get(0)[6]);
        Button bck = (Button) findViewById(R.id.f_ex);
        bck.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                WriteBackupF();
                state = 0;
                setContentView(R.layout.activity_main);
                recurseMain();
            }
        });
        bck = (Button) findViewById(R.id.f_send);
        bck.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                SendF();
                if (danceNumber != danceCount) {
                    danceNumber++;
                    ReadDanceF();
                    FillFinal();
                    WriteBackupF();
                } else {
                    state = 0;
                    setContentView(R.layout.activity_main);
                    recurseMain();
                }
            }
        });
    }

    private void FillFinal(){
            for(int i=0;i<6;++i){
                for(int j=0;j<6;++j) {
                    if ((i >= finAmount) || (j >= finAmount))
                        ((Button) findViewById(fbutton[i] + j)).setWidth(0);
                    if(pairsState.get(0)[i]==0)
                        if(marksDone[j]==0) {
                            ((Button) findViewById(fbutton[i] + j)).setWidth(480 / (finAmount - yMarksDone));
                            ((Button) findViewById(fbutton[i] + j)).setBackgroundResource(android.support.v7.appcompat.R.color.material_grey_100);
                        }
                        else
                            ((Button) findViewById(fbutton[i] + j)).setWidth(0);
                    else
                        if(pairsState.get(0)[i]==(j+1)){
                            ((Button) findViewById(fbutton[i] + j)).setWidth(480);
                            ((Button) findViewById(fbutton[i] + j)).setBackgroundResource(R.color.tvYes);
                        }
                        else
                            ((Button) findViewById(fbutton[i] + j)).setWidth(0);
                }
            }
        ((TextView)findViewById(R.id.fcount)).setText(Integer.toString(yMarksDone));
        findViewById(R.id.f_send).setEnabled(yMarksDone==finAmount);
    }
}

class Connecter implements Runnable{
    private FTPFile[] files;
    private int state=0;
    private InetAddress addr;
    private FTPClient ftp;
    private String log;
    private String dfile;
    private String dpath;
    private String ufile;
    private String upath;
    private File locfile;
    public int getState(){return state;}
    public synchronized void setState(int st){state=st;}
    public FTPFile[] getFiles(){return files;}
    public void setFile(File f){locfile=f;}
    public void setDFile(String f){dfile=f;}
    public void setDPath(String f){dpath=f;}
    public void setUFile(String f){ufile=f;}
    public void setUPath(String f){upath=f;}
    @Override
    public void run() {
            try {
                addr=InetAddress.getByName("CONCURS");
                while (state != -1) {
                    switch (state) {
                        case 1: {
                            ftp = new FTPClient();
                            ftp.connect(addr);
                            log = ftp.getReplyString();
                            boolean sucs = ftp.login("test1", "1234");
                            log = ftp.getReplyString();
                            if(sucs) {
                                ftp.enterLocalPassiveMode();
                                ftp.changeWorkingDirectory("/airdance");
                                log += ftp.getReplyString();
                                state = 0;
                            }
                            else {
                                log+="Try anon";
                                boolean sucs2 = ftp.login("anonymous", "");
                                log += ftp.getReplyString();
                                if(sucs2)
                                    state=0;
                                else
                                    log += "No login";
                            }
                            break;
                        }
                        case 2: {
                            ftp.changeWorkingDirectory(dpath);
                            files = ftp.listFiles(dfile);
                            if (files.length != 0) {
                                FileOutputStream fos = new FileOutputStream(locfile);
                                ftp.retrieveFile(files[0].getName(), fos);
                                fos.close();
                                log+=ftp.getReplyString();
                            } else log += "No such file";
                            state = 0;
                            break;
                        }
                        case 3: {
                            ftp.changeWorkingDirectory(upath);
                            FileInputStream fis = new FileInputStream(locfile);
                            ftp.storeFile(upath+"/"+ufile, fis);
                            fis.close();
                            log+=ftp.getReplyString();
                            state = 0;
                            break;
                        }
                        case 4: {
                            ftp.logout();
                            ftp.disconnect();
                            state=0;
                            break;
                        }
                    }
                    Thread.sleep(100);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
}